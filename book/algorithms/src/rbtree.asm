; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32532.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	insert
PUBLIC	visit
PUBLIC	main
PUBLIC	rotate_left
PUBLIC	rotate_right
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$insert DD imagerel $LN9
	DD	imagerel $LN9+388
	DD	imagerel $unwind$insert
$pdata$visit DD	imagerel $LN8
	DD	imagerel $LN8+162
	DD	imagerel $unwind$visit
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+449
	DD	imagerel $unwind$main
$pdata$rotate_left DD imagerel $LN5
	DD	imagerel $LN5+261
	DD	imagerel $unwind$rotate_left
$pdata$rotate_right DD imagerel $LN5
	DD	imagerel $LN5+259
	DD	imagerel $unwind$rotate_right
pdata	ENDS
_DATA	SEGMENT
$SG10504 DB	'NULL %p %p', 0aH, 00H
$SG10505 DB	' ', 00H
	ORG $+2
$SG10506 DB	'%d', 0aH, 00H
$SG10515 DB	'%p', 0aH, 00H
$SG10516 DB	'%p %p', 0aH, 00H
	ORG $+1
$SG10517 DB	'%p %p %p %p', 0aH, 00H
	ORG $+3
$SG10518 DB	'%d', 0aH, 00H
$SG10519 DB	'%d %d', 0aH, 00H
	ORG $+5
$SG10520 DB	'%d %d %d %d', 0aH, 00H
_DATA	ENDS
xdata	SEGMENT
$unwind$insert DD 010d01H
	DD	0c20dH
$unwind$visit DD 010d01H
	DD	0620dH
$unwind$main DD	010401H
	DD	0e204H
$unwind$rotate_left DD 010901H
	DD	06209H
$unwind$rotate_right DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
y$ = 0
parent$ = 8
alpha$ = 16
beta$ = 24
gamma$ = 32
x$ = 64
rotate_right PROC
; File D:\projects\university\book\algorithms\src\rbtree.c
; Line 100
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 101
	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR parent$[rsp], rax
	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR y$[rsp], rax
	mov	rax, QWORD PTR y$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR alpha$[rsp], rax
	mov	rax, QWORD PTR y$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR beta$[rsp], rax
; Line 102
	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR gamma$[rsp], rax
; Line 104
	mov	rax, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN2@rotate_rig
; Line 105
	mov	rax, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	mov	QWORD PTR [rax+8], rcx
	jmp	SHORT $LN3@rotate_rig
$LN2@rotate_rig:
; Line 107
	mov	rax, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	mov	QWORD PTR [rax+16], rcx
$LN3@rotate_rig:
; Line 108
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR parent$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 110
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR alpha$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 111
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 112
	mov	rax, QWORD PTR y$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR y$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 113
	mov	rax, QWORD PTR y$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR y$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 115
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR beta$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 116
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR gamma$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 117
	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR y$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 118
	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR x$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 119
	add	rsp, 56					; 00000038H
	ret	0
rotate_right ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
y$ = 0
parent$ = 8
beta$ = 16
alpha$ = 24
gamma$ = 32
x$ = 64
rotate_left PROC
; File D:\projects\university\book\algorithms\src\rbtree.c
; Line 79
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 80
	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR parent$[rsp], rax
	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR y$[rsp], rax
	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR alpha$[rsp], rax
	mov	rax, QWORD PTR y$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR beta$[rsp], rax
; Line 81
	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR gamma$[rsp], rax
; Line 83
	mov	rax, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN2@rotate_lef
; Line 84
	mov	rax, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	mov	QWORD PTR [rax+8], rcx
	jmp	SHORT $LN3@rotate_lef
$LN2@rotate_lef:
; Line 86
	mov	rax, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	mov	QWORD PTR [rax+16], rcx
$LN3@rotate_lef:
; Line 87
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR parent$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 89
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR alpha$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 90
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR beta$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 91
	mov	rax, QWORD PTR y$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR y$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 92
	mov	rax, QWORD PTR y$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR y$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 94
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR beta$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 95
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR gamma$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 96
	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR x$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 97
	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR x$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 98
	add	rsp, 56					; 00000038H
	ret	0
rotate_left ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 48
tv169 = 56
tv159 = 64
$S3$ = 72
main	PROC
; File D:\projects\university\book\algorithms\src\rbtree.c
; Line 55
$LN3:
	sub	rsp, 120				; 00000078H
; Line 56
	mov	DWORD PTR $S3$[rsp], 200		; 000000c8H
	mov	DWORD PTR $S3$[rsp+4], 1
	mov	QWORD PTR $S3$[rsp+8], 0
	mov	QWORD PTR $S3$[rsp+16], 0
	mov	QWORD PTR $S3$[rsp+24], 0
	lea	rax, QWORD PTR $S3$[rsp]
	mov	QWORD PTR tree$[rsp], rax
; Line 58
	mov	edx, 199				; 000000c7H
	mov	rcx, QWORD PTR tree$[rsp]
	call	insert
; Line 59
	mov	edx, 222				; 000000deH
	mov	rcx, QWORD PTR tree$[rsp]
	call	insert
; Line 60
	mov	edx, 901				; 00000385H
	mov	rcx, QWORD PTR tree$[rsp]
	call	insert
; Line 61
	mov	edx, 29
	mov	rcx, QWORD PTR tree$[rsp]
	call	insert
; Line 62
	mov	edx, 48					; 00000030H
	mov	rcx, QWORD PTR tree$[rsp]
	call	insert
; Line 63
	mov	edx, 90198				; 00016056H
	mov	rcx, QWORD PTR tree$[rsp]
	call	insert
; Line 64
	mov	edx, 257				; 00000101H
	mov	rcx, QWORD PTR tree$[rsp]
	call	insert
; Line 66
	mov	rdx, QWORD PTR tree$[rsp]
	lea	rcx, OFFSET FLAT:$SG10515
	call	printf
; Line 67
	mov	rax, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG10516
	call	printf
; Line 68
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	r8, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	QWORD PTR tv169[rsp], r8
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR [rcx+8]
	mov	r8, QWORD PTR [rdx+16]
	mov	rax, QWORD PTR tv169[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG10517
	call	printf
; Line 71
	mov	rax, QWORD PTR tree$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:$SG10518
	call	printf
; Line 72
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	r8d, DWORD PTR [rax]
	mov	edx, DWORD PTR [rcx]
	lea	rcx, OFFSET FLAT:$SG10519
	call	printf
; Line 73
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	rdx, QWORD PTR [rdx+16]
	mov	r8, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	r8, QWORD PTR [r8+8]
	mov	QWORD PTR tv159[rsp], r8
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx]
	mov	r8d, DWORD PTR [rdx]
	mov	rax, QWORD PTR tv159[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:$SG10520
	call	printf
; Line 75
	xor	edx, edx
	mov	rcx, QWORD PTR tree$[rsp]
	call	visit
; Line 76
	xor	eax, eax
; Line 77
	add	rsp, 120				; 00000078H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_$1 = 32
x$ = 64
layer$ = 72
visit	PROC
; File D:\projects\university\book\algorithms\src\rbtree.c
; Line 41
$LN8:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 42
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN6@visit
	cmp	DWORD PTR layer$[rsp], 10
	jle	SHORT $LN5@visit
$LN6@visit:
; Line 43
	xor	r8d, r8d
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, OFFSET FLAT:$SG10504
	call	printf
; Line 44
	jmp	SHORT $LN1@visit
$LN5@visit:
; Line 47
	mov	DWORD PTR _$1[rsp], 0
	jmp	SHORT $LN4@visit
$LN2@visit:
	mov	eax, DWORD PTR _$1[rsp]
	inc	eax
	mov	DWORD PTR _$1[rsp], eax
$LN4@visit:
	mov	eax, DWORD PTR layer$[rsp]
	cmp	DWORD PTR _$1[rsp], eax
	jge	SHORT $LN3@visit
; Line 48
	lea	rcx, OFFSET FLAT:$SG10505
	call	printf
	jmp	SHORT $LN2@visit
$LN3@visit:
; Line 50
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:$SG10506
	call	printf
; Line 51
	mov	eax, DWORD PTR layer$[rsp]
	inc	eax
	mov	edx, eax
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	visit
; Line 52
	mov	eax, DWORD PTR layer$[rsp]
	inc	eax
	mov	edx, eax
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	visit
$LN1@visit:
; Line 53
	add	rsp, 56					; 00000038H
	ret	0
visit	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$S1$1 = 32
$S2$2 = 64
tree$ = 112
value$ = 120
insert	PROC
; File D:\projects\university\book\algorithms\src\rbtree.c
; Line 15
$LN9:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 16
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR value$[rsp], eax
	jge	$LN2@insert
; Line 17
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN4@insert
; Line 18
	mov	edx, DWORD PTR value$[rsp]
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	insert
	jmp	$LN5@insert
$LN4@insert:
; Line 20
	mov	eax, DWORD PTR value$[rsp]
	mov	DWORD PTR $S1$1[rsp], eax
	mov	DWORD PTR $S1$1[rsp+4], 1
	mov	QWORD PTR $S1$1[rsp+8], 0
	mov	QWORD PTR $S1$1[rsp+16], 0
	mov	QWORD PTR $S1$1[rsp+24], 0
	mov	rax, QWORD PTR tree$[rsp]
	lea	rcx, QWORD PTR $S1$1[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 21
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 22
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	DWORD PTR [rax+4], 1
; Line 23
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rax+8], 0
; Line 24
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rax+16], 0
; Line 25
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rax+24], 0
$LN5@insert:
; Line 27
	jmp	$LN3@insert
$LN2@insert:
; Line 28
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN6@insert
; Line 29
	mov	edx, DWORD PTR value$[rsp]
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	insert
	jmp	$LN7@insert
$LN6@insert:
; Line 31
	mov	eax, DWORD PTR value$[rsp]
	mov	DWORD PTR $S2$2[rsp], eax
	mov	DWORD PTR $S2$2[rsp+4], 1
	mov	QWORD PTR $S2$2[rsp+8], 0
	mov	QWORD PTR $S2$2[rsp+16], 0
	mov	QWORD PTR $S2$2[rsp+24], 0
	mov	rax, QWORD PTR tree$[rsp]
	lea	rcx, QWORD PTR $S2$2[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 32
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 33
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	DWORD PTR [rax+4], 1
; Line 34
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR [rax+8], 0
; Line 35
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR [rax+16], 0
; Line 36
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR [rax+24], 0
$LN7@insert:
$LN3@insert:
; Line 39
	add	rsp, 104				; 00000068H
	ret	0
insert	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\stdio.h
; Line 956
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 959
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 960
	mov	ecx, 1
	call	__acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 961
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 962
	mov	eax, DWORD PTR _Result$[rsp]
; Line 963
	add	rsp, 56					; 00000038H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\stdio.h
; Line 644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 645
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
